import logging
import json
from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from models import Database, ChatHistory
from states import HumanDesignStates

logger = logging.getLogger(__name__)

router = Router()

db = Database()

@router.message(Command("history"))
async def cmd_history(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_language(user_id)
    
    with db.Session() as session:
        try:
            chats = session.query(ChatHistory).filter_by(user_id=user_id).order_by(ChatHistory.saved_at.desc()).all()
            if not chats:
                response = (
                    "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat! üòä"
                    if language == "–†—É—Å—Å–∫–∏–π"
                    else "You have no saved chats. Start a new conversation with /chat! üòä"
                )
                await message.answer(response)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤, –Ω–æ –æ–Ω–∞ –ø—É—Å—Ç–∞")
                return

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{chat.chat_name} ({chat.saved_at.strftime('%Y-%m-%d %H:%M:%S')} UTC)",
                    callback_data=f"select_chat:{chat.chat_name}"
                )] for chat in chats
            ])
            response = (
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
                if language == "–†—É—Å—Å–∫–∏–π"
                else "Select a chat to continue:"
            )
            await state.set_state(HumanDesignStates.SELECT_CHAT)
            await message.answer(response, reply_markup=keyboard)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤")
        except Exception as e:
            response = (
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
                if language == "–†—É—Å—Å–∫–∏–π"
                else f"‚ùå Error retrieving history: {str(e)}"
            )
            await message.answer(response)
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –¥–ª—è user_id {user_id}: {str(e)}")

@router.callback_query(lambda c: c.data.startswith("select_chat:"))
async def process_chat_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_language(user_id)
    chat_name = callback.data.split(":", 1)[1]

    with db.Session() as session:
        try:
            chat = session.query(ChatHistory).filter_by(user_id=user_id, chat_name=chat_name).first()
            if not chat:
                response = (
                    "–í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat."
                    if language == "–†—É—Å—Å–∫–∏–π"
                    else "Selected chat not found. Try again or start a new conversation with /chat."
                )
                await callback.message.edit_text(response)
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: {chat_name}")
                return

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"üü¢ –û—Ç–∫—Ä—ã—Ç—å" if language == "–†—É—Å—Å–∫–∏–π" else "üü¢ Open",
                    callback_data=f"open_chat:{chat_name}"
                )],
                [InlineKeyboardButton(
                    text=f"‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å" if language == "–†—É—Å—Å–∫–∏–π" else "‚úèÔ∏è Rename",
                    callback_data=f"rename_chat:{chat_name}"
                )],
                [InlineKeyboardButton(
                    text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" if language == "–†—É—Å—Å–∫–∏–π" else "üóëÔ∏è Delete",
                    callback_data=f"delete_chat:{chat_name}"
                )],
                [InlineKeyboardButton(
                    text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "–†—É—Å—Å–∫–∏–π" else "‚¨ÖÔ∏è Back",
                    callback_data="back_to_history"
                )]
            ])
            response = (
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç: {chat_name}"
                if language == "–†—É—Å—Å–∫–∏–π"
                else f"Selected chat: {chat_name}"
            )
            await state.update_data(selected_chat_name=chat_name)
            await state.set_state(HumanDesignStates.CHAT_ACTIONS)
            await callback.message.edit_text(response, reply_markup=keyboard)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –≤—ã–±—Ä–∞–ª —á–∞—Ç '{chat_name}'")
        except Exception as e:
            response = (
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞: {str(e)}"
                if language == "–†—É—Å—Å–∫–∏–π"
                else f"‚ùå Error selecting chat: {str(e)}"
            )
            await callback.message.edit_text(response)
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –¥–ª—è user_id {user_id}: {str(e)}")

@router.callback_query(lambda c: c.data.startswith("open_chat:"))
async def open_chat(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_language(user_id)
    chat_name = callback.data.split(":", 1)[1]

    with db.Session() as session:
        try:
            chat = session.query(ChatHistory).filter_by(user_id=user_id, chat_name=chat_name).first()
            if not chat:
                response = (
                    "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat."
                    if language == "–†—É—Å—Å–∫–∏–π"
                    else "Chat not found. Try again or start a new conversation with /chat."
                )
                await callback.message.edit_text(response)
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: {chat_name}")
                return

            conversation_history = json.loads(chat.conversation)
            await state.update_data(conversation_history=conversation_history, conversation_name=chat_name)
            await state.set_state(HumanDesignStates.MAIN_CONVERSATION)
            response = (
                f"–ß–∞—Ç '{chat_name}' –∑–∞–≥—Ä—É–∂–µ–Ω! –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å! üòä"
                if language == "–†—É—Å—Å–∫–∏–π"
                else f"Chat '{chat_name}' loaded! Ask your question! üòä"
            )
            await callback.message.edit_text(response)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –æ—Ç–∫—Ä—ã–ª —á–∞—Ç '{chat_name}'")
        except Exception as e:
            response = (
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞: {str(e)}"
                if language == "–†—É—Å—Å–∫–∏–π"
                else f"‚ùå Error loading chat: {str(e)}"
            )
            await callback.message.edit_text(response)
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞ –¥–ª—è user_id {user_id}: {str(e)}")

@router.callback_query(lambda c: c.data.startswith("rename_chat:"))
async def rename_chat(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_language(user_id)
    chat_name = callback.data.split(":", 1)[1]

    response = (
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ '{chat_name}':"
        if language == "–†—É—Å—Å–∫–∏–π"
        else f"Enter a new name for chat '{chat_name}':"
    )
    await state.set_state(HumanDesignStates.RENAME_CHAT)
    await state.update_data(old_chat_name=chat_name)
    await callback.message.answer(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ '{chat_name}'")

@router.message(HumanDesignStates.RENAME_CHAT)
async def process_rename_chat(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_language(user_id)
    new_name = message.text.strip()

    if not new_name or len(new_name) > 100:
        response = (
            "–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            if language == "–†—É—Å—Å–∫–∏–π"
            else "Chat name must not be empty and should be less than 100 characters. Try again."
        )
        await message.answer(response)
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç user_id {user_id}: {new_name}")
        return

    data = await state.get_data()
    old_name = data.get("old_chat_name")

    try:
        db.rename_conversation(user_id, old_name, new_name)
        response = (
            f"–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∏–∑ '{old_name}' –≤ '{new_name}'! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            if language == "–†—É—Å—Å–∫–∏–π"
            else f"Chat successfully renamed from '{old_name}' to '{new_name}'! Select an action:"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"üü¢ –û—Ç–∫—Ä—ã—Ç—å" if language == "–†—É—Å—Å–∫–∏–π" else "üü¢ Open",
                callback_data=f"open_chat:{new_name}"
            )],
            [InlineKeyboardButton(
                text=f"‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å" if language == "–†—É—Å—Å–∫–∏–π" else "‚úèÔ∏è Rename",
                callback_data=f"rename_chat:{new_name}"
            )],
            [InlineKeyboardButton(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" if language == "–†—É—Å—Å–∫–∏–π" else "üóëÔ∏è Delete",
                callback_data=f"delete_chat:{new_name}"
            )],
            [InlineKeyboardButton(
                text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "–†—É—Å—Å–∫–∏–π" else "‚¨ÖÔ∏è Back",
                callback_data="back_to_history"
            )]
        ])
        await state.update_data(selected_chat_name=new_name)
        await state.set_state(HumanDesignStates.CHAT_ACTIONS)
        await message.answer(response, reply_markup=keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª —á–∞—Ç –∏–∑ '{old_name}' –≤ '{new_name}'")
    except Exception as e:
        response = (
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞: {str(e)}"
            if language == "–†—É—Å—Å–∫–∏–π"
            else f"‚ùå Error renaming chat: {str(e)}"
        )
        await message.answer(response)
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è user_id {user_id}: {str(e)}")

@router.callback_query(lambda c: c.data == "back_to_history")
async def back_to_history(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_language(user_id)
    
    with db.Session() as session:
        try:
            chats = session.query(ChatHistory).filter_by(user_id=user_id).order_by(ChatHistory.saved_at.desc()).all()
            if not chats:
                response = (
                    "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat! üòä"
                    if language == "–†—É—Å—Å–∫–∏–π"
                    else "You have no saved chats. Start a new conversation with /chat! üòä"
                )
                await callback.message.edit_text(response)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤, –Ω–æ –æ–Ω–∞ –ø—É—Å—Ç–∞")
                return

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{chat.chat_name} ({chat.saved_at.strftime('%Y-%m-%d %H:%M:%S')} UTC)",
                    callback_data=f"select_chat:{chat.chat_name}"
                )] for chat in chats
            ])
            response = (
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
                if language == "–†—É—Å—Å–∫–∏–π"
                else "Select a chat to continue:"
            )
            await state.set_state(HumanDesignStates.SELECT_CHAT)
            await callback.message.edit_text(response, reply_markup=keyboard)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤")
        except Exception as e:
            response = (
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
                if language == "–†—É—Å—Å–∫–∏–π"
                else f"‚ùå Error retrieving history: {str(e)}"
            )
            await callback.message.edit_text(response)
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –¥–ª—è user_id {user_id}: {str(e)}")

@router.callback_query(lambda c: c.data.startswith("delete_chat:"))
async def delete_chat(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_language(user_id)
    chat_name = callback.data.split(":", 1)[1]

    try:
        db.delete_conversation(user_id, chat_name)
        response = (
            f"–ß–∞—Ç '{chat_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat."
            if language == "–†—É—Å—Å–∫–∏–π"
            else f"Chat '{chat_name}' successfully deleted! Start a new conversation with /chat."
        )
        await callback.message.edit_text(response)
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —É–¥–∞–ª–∏–ª —á–∞—Ç '{chat_name}'")
    except Exception as e:
        response = (
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {str(e)}"
            if language == "–†—É—Å—Å–∫–∏–π"
            else f"‚ùå Error deleting chat: {str(e)}"
        )
        await callback.message.edit_text(response)
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è user_id {user_id}: {str(e)}")