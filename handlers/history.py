import logging
import json
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from models import Database, ChatHistory
from states import HumanDesignStates

logger = logging.getLogger(__name__)

router = Router()

db = Database()

@router.message(Command("history"))
async def cmd_history(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_language(user_id)
    
    with db.Session() as session:
        try:
            chats = session.query(ChatHistory).filter_by(user_id=user_id).order_by(ChatHistory.saved_at.desc()).all()
            if not chats:
                response = (
                    "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat! üòä"
                    if language == "–†—É—Å—Å–∫–∏–π"
                    else "You have no saved chats. Start a new conversation with /chat! üòä"
                )
                await message.answer(response)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤, –Ω–æ –æ–Ω–∞ –ø—É—Å—Ç–∞")
                return

            keyboard = ReplyKeyboardMarkup(
                resize_keyboard=True,
                one_time_keyboard=True,
                keyboard=[[KeyboardButton(text=f"{chat.chat_name} ({chat.saved_at.strftime('%Y-%m-%d %H:%M:%S')} UTC)")] for chat in chats]
            )
            response = (
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
                if language == "–†—É—Å—Å–∫–∏–π"
                else "Select a chat to continue:"
            )
            await state.set_state(HumanDesignStates.SELECT_CHAT)
            await message.answer(response, reply_markup=keyboard)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤")
        except Exception as e:
            response = (
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
                if language == "–†—É—Å—Å–∫–∏–π"
                else f"‚ùå Error retrieving history: {str(e)}"
            )
            await message.answer(response)
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –¥–ª—è user_id {user_id}: {str(e)}")

@router.message(HumanDesignStates.SELECT_CHAT)
async def process_chat_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_language(user_id)
    selected_chat = message.text.strip()

    with db.Session() as session:
        try:
            chat_name = selected_chat.split(" (")[0]
            chat = session.query(ChatHistory).filter_by(user_id=user_id, chat_name=chat_name).first()
            if not chat:
                response = (
                    "–í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat."
                    if language == "–†—É—Å—Å–∫–∏–π"
                    else "Selected chat not found. Try again or start a new conversation with /chat."
                )
                await message.answer(response, reply_markup=ReplyKeyboardRemove())
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: {selected_chat}")
                return

            conversation_history = json.loads(chat.conversation)
            await state.update_data(conversation_history=conversation_history)
            await state.set_state(HumanDesignStates.MAIN_CONVERSATION)
            response = (
                f"–ß–∞—Ç '{chat.chat_name}' –∑–∞–≥—Ä—É–∂–µ–Ω! –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ Human Design! üòä"
                if language == "–†—É—Å—Å–∫–∏–π"
                else f"Chat '{chat.chat_name}' loaded! Ask your question about Human Design! üòä"
            )
            await message.answer(response, reply_markup=ReplyKeyboardRemove())
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —á–∞—Ç '{chat.chat_name}'")
        except Exception as e:
            response = (
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞: {str(e)}"
                if language == "–†—É—Å—Å–∫–∏–π"
                else f"‚ùå Error loading chat: {str(e)}"
            )
            await message.answer(response, reply_markup=ReplyKeyboardRemove())
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞ –¥–ª—è user_id {user_id}: {str(e)}")