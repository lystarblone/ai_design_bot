import logging
import json
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from models import Database
from states import HumanDesignStates
from keyboards import get_save_chat_keyboard

logger = logging.getLogger(__name__)

router = Router()

db = Database()

@router.message(Command("reset"))
async def cmd_reset(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_language(user_id)
    
    response = (
        "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞? üìú"
        if language == "–†—É—Å—Å–∫–∏–π"
        else "Would you like to save the current chat before resetting the context? üìú"
    )
    
    await state.set_state(HumanDesignStates.CONFIRM_SAVE_CHAT)
    await message.answer(response, reply_markup=get_save_chat_keyboard(language))
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

@router.message(HumanDesignStates.CONFIRM_SAVE_CHAT)
async def process_save_confirmation(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_language(user_id)
    choice = message.text.strip().lower()

    if choice not in ["–¥–∞", "yes", "–Ω–µ—Ç", "no"]:
        response = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'."
            if language == "–†—É—Å—Å–∫–∏–π"
            else "Please select 'Yes' or 'No'."
        )
        await message.answer(response, reply_markup=get_save_chat_keyboard(language))
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç user_id {user_id}: {choice}")
        return

    if choice in ["–¥–∞", "yes"]:
        response = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —á–∞—Ç–∞."
            if language == "–†—É—Å—Å–∫–∏–π"
            else "Please enter a name for your chat."
        )
        await state.set_state(HumanDesignStates.NAME_CHAT)
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞")
    else:
        await state.clear()
        await state.set_state(HumanDesignStates.MAIN_CONVERSATION)
        response = (
            "–ß–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. üòä"
            if language == "–†—É—Å—Å–∫–∏–π"
            else "Chat not saved. Context reset. üòä"
        )
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è user_id {user_id}, —á–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

@router.message(HumanDesignStates.NAME_CHAT)
async def process_chat_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_language(user_id)
    chat_name = message.text.strip()

    if not chat_name or len(chat_name) > 100:
        response = (
            "–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            if language == "–†—É—Å—Å–∫–∏–π"
            else "Chat name must not be empty and should be less than 100 characters. Try again."
        )
        await message.answer(response)
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç user_id {user_id}: {chat_name}")
        return

    data = await state.get_data()
    conversation_history = data.get("conversation_history", [])
    
    if conversation_history:
        db.save_conversation(user_id, chat_name, json.dumps(conversation_history))
        response = (
            f"–ß–∞—Ç '{chat_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ Human Design! üòä"
            if language == "–†—É—Å—Å–∫–∏–π"
            else f"Chat '{chat_name}' saved! Ask your question about Human Design! üòä"
        )
    else:
        response = (
            "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ Human Design! üòä"
            if language == "–†—É—Å—Å–∫–∏–π"
            else "Chat history is empty, nothing saved. Ask your question about Human Design! üòä"
        )

    await state.clear()
    await state.set_state(HumanDesignStates.MAIN_CONVERSATION)
    await message.answer(response, reply_markup=ReplyKeyboardRemove())
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è user_id {user_id}, —á–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{chat_name}'" if conversation_history else f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è user_id {user_id}, —á–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è)")