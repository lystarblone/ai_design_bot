import logging
import json
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from models import Database
from states import HumanDesignStates

logger = logging.getLogger(__name__)

router = Router()

db = Database()

save_chat_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    one_time_keyboard=True,
    keyboard=[
        [KeyboardButton(text="–î–∞ / Yes"), KeyboardButton(text="–ù–µ—Ç / No")]
    ]
)

@router.message(Command("reset"))
async def cmd_reset(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_language(user_id)
    
    response = (
        "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞? üìú"
        if language == "–†—É—Å—Å–∫–∏–π"
        else "Would you like to save the current chat before resetting the context? üìú"
    )
    
    await state.set_state(HumanDesignStates.CONFIRM_SAVE_CHAT)
    await message.answer(response, reply_markup=save_chat_keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

@router.message(HumanDesignStates.CONFIRM_SAVE_CHAT)
async def process_save_confirmation(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_language(user_id)
    choice = message.text.strip().lower()

    cleaned_choice = choice.replace("üá∑üá∫", "").replace("üá∫üá∏", "").strip().lower()

    if cleaned_choice not in ["–¥–∞", "yes", "–Ω–µ—Ç", "no"]:
        response = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞ / Yes' –∏–ª–∏ '–ù–µ—Ç / No'."
            if language == "–†—É—Å—Å–∫–∏–π"
            else "Please select 'Yes' or 'No'."
        )
        await message.answer(response, reply_markup=save_chat_keyboard)
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç user_id {user_id}: {cleaned_choice}")
        return

    if cleaned_choice in ["–¥–∞", "yes"]:
        data = await state.get_data()
        conversation_history = data.get("conversation_history", [])
        if conversation_history:
            db.save_conversation(user_id, json.dumps(conversation_history))
            response = (
                "–ß–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat. üòä"
                if language == "–†—É—Å—Å–∫–∏–π"
                else "Chat saved! Context reset. Start a new conversation with /chat. üòä"
            )
        else:
            response = (
                "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat."
                if language == "–†—É—Å—Å–∫–∏–π"
                else "Chat history is empty, nothing saved. Context reset. Start a new conversation with /chat."
            )
    else:
        response = (
            "–ß–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat."
            if language == "–†—É—Å—Å–∫–∏–π"
            else "Chat not saved. Context reset. Start a new conversation with /chat."
        )

    await state.clear()
    await message.answer(response)
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è user_id {user_id}, —á–∞—Ç {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω' if cleaned_choice in ['–¥–∞', 'yes'] else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'}")